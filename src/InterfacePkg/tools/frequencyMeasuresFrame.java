/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfacePkg.tools;

import DataPkg.SavedFileObj;
import DataPkg.frequencyFileReader;
import DataPkg.graphFileReader;
import DataPkg.posMeasuresFileReader;
import InterfacePkg.MainMenuFrame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Objects;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ignacio
 */
public class frequencyMeasuresFrame extends javax.swing.JFrame {
    //Attributes
    private ArrayList<Double> dataList = new ArrayList();
    private final int windowID = 2;
    private String fileName = "Nuevo Documento";
     /**
     * Creates new form frequencyMeasuresFrame
     */
    public frequencyMeasuresFrame(frequencyFileReader preLoad, String pFileName) {
        initComponents();
        
        if(preLoad!=null){
            dataList = preLoad.getList();
            int counter = 0;
            DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
            try{
                Collections.sort(dataList);
                ArrayList<Double> uniqueList = new ArrayList();
                for(Double data : dataList){
                    counter++;
                    if(!uniqueList.contains(data))
                        uniqueList.add(data);
                }

                ArrayList<Integer> countList = new ArrayList();
                for(Double data : uniqueList){
                    int cant = 0;
                    for(Double dataC : dataList){
                        if(Objects.equals(data, dataC))
                            cant++;
                    }
                    countList.add(cant);
                }

                for(int i = model.getRowCount() - 1 ; i>= 0; i--)
                    model.removeRow(i);

                for(Double data : uniqueList){
                    int index = uniqueList.indexOf(data);
                    Object[] row = { data, countList.get(index), new DecimalFormat("#.##").format(ruleOfThree(counter, countList.get(index))) + "%"};
                    model.addRow(row);
                }            
                numInputTA.setText("");
                dataTable.repaint();
            }
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Todas las entradas de la tabla deben ser números", "Error Numérico", JOptionPane.ERROR_MESSAGE);
            }
        }
        if(pFileName != null)
        fileName = pFileName;
        this.setTitle(fileName);
        
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        numInputTA = new javax.swing.JTextField();
        addDataBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMBtn = new javax.swing.JMenuItem();
        loadMBtn = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addDataBtn.setText("Añadir Dato");
        addDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataBtnActionPerformed(evt);
            }
        });

        returnBtn.setText("Regresar");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numInputTA)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(returnBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 188, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numInputTA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDataBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero", "Absoluta", "Porcentual"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jLabel1.setText("Explicación");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Archivo");

        saveMBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMBtn.setText("Guardar");
        saveMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveMBtn);

        loadMBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadMBtn.setText("Cargar");
        loadMBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMBtnActionPerformed(evt);
            }
        });
        jMenu1.add(loadMBtn);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Herramientas");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataBtnActionPerformed
        
        int counter = 0;
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        try{
            dataList.add(Double.parseDouble(numInputTA.getText()));
            Collections.sort(dataList);
            
            
            ArrayList<Double> uniqueList = new ArrayList();
            for(Double data : dataList){
                counter++;
                if(!uniqueList.contains(data))
                    uniqueList.add(data);
            }
            
            ArrayList<Integer> countList = new ArrayList();
            for(Double data : uniqueList){
                int cant = 0;
                for(Double dataC : dataList){
                    if(Objects.equals(data, dataC))
                        cant++;
                }
                countList.add(cant);
            }
            
            for(int i = model.getRowCount() - 1 ; i>= 0; i--)
                model.removeRow(i);
            
            for(Double data : uniqueList){
                int index = uniqueList.indexOf(data);
                Object[] row = { data, countList.get(index), new DecimalFormat("#.##").format(ruleOfThree(counter, countList.get(index))) + "%"};
                model.addRow(row);
            }            
            numInputTA.setText("");
        }
        catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Todas las entradas de la tabla deben ser números", "Error Numérico", JOptionPane.ERROR_MESSAGE);
        }
               
    }//GEN-LAST:event_addDataBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        // TODO add your handling code here:
        MainMenuFrame main =  new MainMenuFrame();
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_returnBtnActionPerformed

    private void saveMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMBtnActionPerformed
        String path;
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("DSTF Files", "dstf");
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Specify a file to save");  
        int userSelection = fileChooser.showSaveDialog(this);
        
        SavedFileObj savedFile = new SavedFileObj(windowID);
        frequencyFileReader savedFrequency = new frequencyFileReader(dataList);
        
        if (userSelection == JFileChooser.APPROVE_OPTION){
            File fileToSave = fileChooser.getSelectedFile();
            if(fileToSave.exists() && !fileToSave.isDirectory()){
            }
            
            if(!fileToSave.getAbsolutePath().endsWith(".dstf"))
                path = fileToSave.getAbsolutePath()+".dstf";
            else
                path = fileToSave.getAbsolutePath();
            
            try
            {
                FileOutputStream fileOut = new FileOutputStream(path);
                ObjectOutputStream out = new ObjectOutputStream(fileOut);
                Path pathS = Paths.get(path);
                fileName = pathS.getFileName().toString();
                this.setTitle(fileName);
                out.writeObject(savedFile);
                out.writeObject(savedFrequency);
                out.close();
                fileOut.close();
            }
            catch(IOException i){
                i.printStackTrace();
            }

        }
    }//GEN-LAST:event_saveMBtnActionPerformed

    private void loadMBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMBtnActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("DSTF Files", "dstf");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Parts of the file manager(path, and savedFileObj)
            File file = fc.getSelectedFile();
            String path = file.getAbsolutePath();
            Path pathS = Paths.get(path);
            SavedFileObj e = null;
            
            
            try{           
                FileInputStream fileIn = new FileInputStream(path);
                ObjectInputStream in = new ObjectInputStream(fileIn);
                e = (SavedFileObj) in.readObject();
                if(e.getWindowType() == 1){
                    graphFileReader a = (graphFileReader) in.readObject();
                    in.close();
                    fileIn.close();
                    graphicBarFrame b =  new graphicBarFrame(a,pathS.getFileName().toString());
                    b.setVisible(true);
                    this.dispose();
                }
                else if(e.getWindowType() == 2){
                    frequencyFileReader a = (frequencyFileReader) in.readObject();
                    in.close();
                    fileIn.close();
                    frequencyMeasuresFrame b = new frequencyMeasuresFrame(a, pathS.getFileName().toString());
                    b.setVisible(true);
                    this.dispose();
                }
                else if(e.getWindowType() == 3){
                    posMeasuresFileReader a = (posMeasuresFileReader) in.readObject();
                    in.close();
                    fileIn.close();
                    posMeasuresFrame b = new posMeasuresFrame(a, pathS.getFileName().toString());
                    b.setVisible(true);
                    this.dispose();
                }
                else{
                    in.close();
                    fileIn.close();
                }
            }
            catch(IOException i){
                i.printStackTrace();
            }
            catch(ClassNotFoundException c){
                c.printStackTrace();
            };
        }
    }//GEN-LAST:event_loadMBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frequencyMeasuresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frequencyMeasuresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frequencyMeasuresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frequencyMeasuresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frequencyMeasuresFrame(null, null).setVisible(true);
            }
        });
    }
    
    private double ruleOfThree(int total, double rep){
        return (rep * 100)/ total;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDataBtn;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem loadMBtn;
    private javax.swing.JTextField numInputTA;
    private javax.swing.JButton returnBtn;
    private javax.swing.JMenuItem saveMBtn;
    // End of variables declaration//GEN-END:variables
}
